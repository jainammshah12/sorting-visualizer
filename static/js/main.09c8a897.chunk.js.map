{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","Sorting Visualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startId","endId","middleId","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","low","high","pivotIndex","pivot","swap","lti","partition","temp","SortingVisualizer","_React$Component","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","_inherits","_createClass","key","value","resetArray","randomIntFromInterval","setState","console","log","_loop","arrayBars","document","getElementsByClassName","_animations$i","_slicedToArray","barOneId","barTwoId","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","_animations$i2","barOneIdx","newHeight","height","concat","_loop2","isColorChange","_animations$i3","barOneIndex","barTwoIndex","_animations$i4","barIndex","barStyle","_this2","React","createElement","className","map","idx","onClick","quickSort","mergeSort","Component","min","max","random","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.09c8a897.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n  \r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startId,\r\n    endId,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    if (startId === endId) return;\r\n    const middleId = Math.floor((startId + endId) / 2);\r\n    mergeSortHelper(auxiliaryArray, startId, middleId, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleId + 1, endId, mainArray, animations);\r\n    doMerge(mainArray, startId, middleId, endId, auxiliaryArray, animations);\r\n}\r\n\r\n\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startId,\r\n    middleId,\r\n    endId,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startId;\r\n    let i = startId;\r\n    let j = middleId + 1;\r\n    while (i <= middleId && j <= endId) {\r\n      animations.push([i, j]);// These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]); // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        animations.push([k, auxiliaryArray[i]]); // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        animations.push([k, auxiliaryArray[j]]);// We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleId) {\r\n      animations.push([i, i]); // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]); // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([k, auxiliaryArray[i]]); // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endId) {\r\n      animations.push([j, j]); // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]); // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([k, auxiliaryArray[j]]);  // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}","// export function quickSortAnimations(array){\r\n//     const animations = [];\r\n//     if(array.length <= 1) return array;\r\n//     const auxiliaryArray = array.slice();\r\n//     quickSortHelper(array, 0, array.length-1,auxiliaryArray, animations);\r\n//     array = auxiliaryArray;\r\n//     return animations;\r\n// }\r\n\r\n// function quickSortHelper(\r\n//   mainArray,\r\n//   startId,\r\n//   endId,\r\n//   auxiliaryArray,\r\n//   animations\r\n// ){\r\n  \r\n//   if(startId >= endId || endId === mainArray.length || startId-1 === mainArray.length) return;\r\n//   const pivotId = partition(mainArray, startId, endId, auxiliaryArray, animations);\r\n//   quickSortHelper(mainArray, startId, pivotId-1, auxiliaryArray, animations);\r\n//   quickSortHelper(mainArray, pivotId+1, endId, auxiliaryArray, animations);\r\n// }\r\n\r\n// function partition(\r\n//   mainArray,\r\n//   startId,\r\n//   endId,\r\n//   auxiliaryArray,\r\n//   animations\r\n// ){\r\n//   let pivot = startId,\r\n//       left = startId + 1,\r\n//       right = endId+1;\r\n//   animations.push([left, right]);\r\n//   while (right > left) {\r\n//     if (auxiliaryArray[right] < auxiliaryArray[pivot] && auxiliaryArray[left] > auxiliaryArray[pivot]) {\r\n//       animations.push([left, right]);\r\n//       animations.push([left, right]);\r\n//     }\r\n//     while (auxiliaryArray[right] >= auxiliaryArray[pivot]) {\r\n//       right--;\r\n//     }\r\n//     while (auxiliaryArray[left] <= auxiliaryArray[pivot]) {\r\n//       left++;\r\n//     }\r\n//     if (right > left){ \r\n//       animations.push([left, auxiliaryArray[right]]);\r\n//       swap(mainArray, left, right);\r\n//     }\r\n//   }\r\n//   if (pivot !== right) {\r\n//     animations.push([pivot, right]);\r\n//     animations.push([pivot, right]);\r\n//     animations.push([pivot, mainArray[right]]);\r\n//     swap(mainArray, pivot, right);\r\n//   }\r\n//   return right;\r\n// }\r\n\r\n// function swap(array, i, j) {\r\n//   const temp = array[i];\r\n//   array[i] = array[j];\r\n//   array[j] = temp;\r\n// }\r\n\r\nexport function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return animations;\r\n  quickSortHelper(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(array, low, high, animations) {\r\n  if (low < high) {\r\n      const pivotIndex = partition(array, low, high, animations);\r\n      quickSortHelper(array, low, pivotIndex - 1, animations);\r\n      quickSortHelper(array, pivotIndex + 1, high, animations);\r\n  }\r\n}\r\n\r\nfunction partition(array, low, high, animations) {\r\n  let pivot = low;\r\n  animations.push([\"comparison1\", pivot, high]);\r\n  animations.push([\"swap\", pivot, array[high]]);\r\n  animations.push([\"swap\", high, array[pivot]]);\r\n  animations.push([\"comparison2\", pivot, high]);\r\n  swap(array, pivot, high);\r\n\r\n  let lti = low;\r\n\r\n  for (let i = low; i < high; ++i) {\r\n    animations.push([\"comparison1\", i, high]);\r\n    animations.push([\"comparison2\", i, high]);\r\n    if (array[i] <= array[high]) {\r\n      animations.push([\"comparison1\", i, lti]);\r\n      animations.push([\"swap\", i, array[lti]]);\r\n      animations.push([\"swap\", lti, array[i]]);\r\n      animations.push([\"comparison2\", i, lti]);\r\n      swap(array, i, lti);\r\n      lti++;\r\n    }\r\n  }\r\n  animations.push([\"comparison1\", lti, high]);\r\n  animations.push([\"swap\", high, array[lti]]);\r\n  animations.push([\"swap\", lti, array[high]]);\r\n  animations.push([\"comparison2\", lti, high]);\r\n\r\n  swap(array, lti, high);\r\n  return lti;\r\n  \r\n}\r\n\r\nfunction swap(array, i, j) {\r\n  const temp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = temp;\r\n}\r\n","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/mergeSort.js';\r\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSort.js';\r\n\r\n\r\nconst animation_speed = 10;\r\n\r\nconst array_bars = 310;\r\n\r\nconst primary_color = 'turquoise';\r\n\r\nconst secondary_color = 'red';\r\n\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n        for(let i = 0; i < array_bars; i++){\r\n            array.push(randomIntFromInterval(5, 640));\r\n        }\r\n        this.setState({array});\r\n    }\r\n    mergeSort(){\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        console.log(this.state.array);\r\n        console.log(animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 3 !== 2;\r\n          if (isColorChange) {\r\n            const [barOneId, barTwoId] = animations[i];\r\n            const barOneStyle = arrayBars[barOneId].style;\r\n            const barTwoStyle = arrayBars[barTwoId].style;\r\n            const color = i % 3 === 0 ? secondary_color : primary_color;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * animation_speed);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * animation_speed);\r\n          }\r\n        }\r\n    }\r\n    quickSort(){\r\n        const animations = getQuickSortAnimations(this.state.array);\r\n        console.log(animations);        \r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange =\r\n                animations[i][0] === \"comparison1\" ||\r\n                animations[i][0] === \"comparison2\";\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            if (isColorChange === true) {\r\n                const color =\r\n                animations[i][0] === \"comparison1\"\r\n                ? secondary_color\r\n                : primary_color;\r\n                const [, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n                }, i * animation_speed);\r\n            } else {\r\n                const [, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                }, i * animation_speed);\r\n            }\r\n        }\r\n                \r\n    }    \r\n    bubbleSort(){\r\n\r\n    }\r\n    heapSort(){\r\n\r\n    }\r\n    render(){\r\n        const {array} = this.state;\r\n        return (\r\n            <div className='array-container'>\r\n                {array.map((value, idx) =>(\r\n                    <div className='array-bar' key={idx} style={{height: `${value}px`}}>\r\n                    </div>\r\n                ))}\r\n                <div className='buttons'>\r\n                    <button className='gen' onClick={() => this.resetArray()}>Generate New Array</button>\r\n                    <button className='quick' onClick={() => this.quickSort()}>Quick Sort</button>\r\n                    <button className='merge' onClick={() => this.mergeSort()}>Merge Sort</button> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst randomIntFromInterval = (min, max) =>{\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nconst arraysAreEqual = (x, y) => {\r\n    if(x.length !== y.length) return false;\r\n    \r\n    for(let i = 0; i < x.length; i++){\r\n        if(x[i] !== y[i]) return false;\r\n    }\r\n    return true;\r\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './Sorting Visualizer/SortingVisualizer.jsx';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}